<?php

namespace App\Telegraph\Handlers;

use App\Models\Conversation;
use App\Models\Order;
use App\Models\OrderPayment;
use App\Models\User;
use App\Models\UserProfile;
use App\Services\Messaging\ConversationService;
use DefStudio\Telegraph\Enums\ChatActions;
use DefStudio\Telegraph\Facades\Telegraph;
use DefStudio\Telegraph\Handlers\WebhookHandler;
use DefStudio\Telegraph\Keyboard\Button;
use DefStudio\Telegraph\Keyboard\Keyboard;
use DefStudio\Telegraph\Models\TelegraphChat;
use Illuminate\Support\Stringable;
use Illuminate\Support\Facades\Log;
use App\Models\Message;
class TelegramWebhookHandler extends WebhookHandler
{

    public function start()
    {
        $chat = $this->getChat();

        $chat->chatAction(ChatActions::TYPING)->send();

        $user_profile = $this->user_profile(true);

        if (!$user_profile)
            return;

        $user_name = '';
        if ($user_profile->first_name) {
            $user_name .= $user_profile->first_name . " ";
        }
        if ($user_profile->last_name) {
            $user_name .= $user_profile->last_name;
        }
        if (empty($user_name)) {
            $user = User::where('id', $user_profile->user_id)->first();
            $user_name = $user->email;
        }

        $chat->message("–ü—Ä–∏–≤–µ—Ç, {$user_name}! –ú—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—à–ª–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É */orders*, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã.")->send();
    }


    private function user_profile($await_email = false): UserProfile|null
    {
        $telegramId = $this->getUserId();
        $chat = $this->getChat();

        $user_profile = UserProfile::where('telegram_user_id', $telegramId)->first();

        if (!$user_profile) {
            // save state and wait email
            if ($await_email) {
                $chat->message("–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π email, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.")->send();
                cache()->put("awaiting_email_$telegramId", true, now()->addMinutes(10));
            }
            return null;
        }
        return $user_profile;
    }

    public function handleUnknownCommand(Stringable $text): void
    {
        $this->reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
    }

    public function handleChatMessage(Stringable $text): void
    {
        $telegramId = $this->message->from()->id();
        $awaitingEmail = cache("awaiting_email_$telegramId");

        if ($awaitingEmail) {
            $email = $this->message->text();

            if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
                $this->reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.");
                return;
            }
            // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
            $user = User::where('email', $email)->first();

            if ($user) {
                $user_profile = UserProfile::where('user_id', $user->id)->first();

                if (!$user_profile) {
                    $user_profile = UserProfile::create([
                        'user_id' => $user->id,
                    ]);
                }
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º telegram_user_id –≤ –ø—Ä–æ—Ñ–∏–ª—å
                $user_profile->update([
                    'telegram_user_id' => $telegramId,
                ]);

                cache()->forget("awaiting_email_$telegramId");

                $this->reply("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É */orders*, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã.");
            } else {
                cache()->forget("awaiting_email_$telegramId");
                $this->reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.");
            }

            return;
        }

        // –µ—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è email
        $this->reply("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏—Ç–µ */start* —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.");

        Log::info(json_encode($this->message->toArray(), JSON_UNESCAPED_UNICODE));
    }

    public function orders()
    {
        $chat = $this->getChat();

        $chat->chatAction(ChatActions::TYPING)->send();

        $user_profile = $this->user_profile();

        if (!$user_profile)
            return;

        $this->send_order_data($user_profile, $chat);
    }

    public function send_order_data(
        UserProfile $user_profile,
        \DefStudio\Telegraph\Telegraph $chat
    ) {
        $find_pending_orders_ids = Order
            ::whereIn('status', [Order::STATUS_PROCESSING, Order::STATUS_NEW])
            ->whereNull("deleted_at")
            ->pluck('id')->toArray();

        if (count($find_pending_orders_ids) <= 0) {
            $this->reply("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤.");
            return;
        }

        $find_pending_orders = Order
            ::whereIn('id', $find_pending_orders_ids)
            ->where('client_id', $user_profile->user_id)
            ->with(['payments', 'items'])
            ->get();


        foreach ($find_pending_orders as $order) {
            $message = "*–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑!*üéâ\n";
            $message .= "–í—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ –∑–∞–∫–∞–∑ ‚Ññ{$order->id} –æ—Ç {$order->created_at->format('d.m.Y –≤ H:i')} –Ω–∞ —Å—É–º–º—É {$order->total_amount}.\n\n";

            $message .= "–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n";
            foreach ($order->items as $item) {
                if ($item->productVariant) {
                    $message .= "- {$item->productVariant->name} x {$item->quantity}\n";
                } else {
                    $message .= "- {$item->product->name} x {$item->quantity}\n";
                }
            }

            $message .= "\n";

            $message .= "–ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.\n";
            $message .= "–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ *Again*!\n\n";

            $chat->message($message)->send();

            foreach ($order->payments as $payment) {
                $payment_message = "*–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –ø–ª–∞—Ç—ë–∂!*üéâ\n";
                $payment_message .= "–ú—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –ø–ª–∞—Ç—ë–∂ ‚Ññ{$payment->id} –æ—Ç {$payment->created_at->format('d.m.Y –≤ H:i')} –Ω–∞ —Å—É–º–º—É {$payment->amount}.\n";
                $payment_message .= "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n";
                $payment_message .= "–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ *Again*!\n\n";
                $chat->message($payment_message)->send();
            }
        }
    }

    public function help()
    {
        $chat = Telegraph::chat($this->message->from()->id());

        $chat->message("–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é –¥–µ–ª–∞—Ç—å:")
            ->keyboard(
                Keyboard::make()->buttons([
                    Button::make("–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")->action('start'),
                    Button::make("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã")->action('orders'),
                    Button::make("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç")->url(env("APP_URL")),
                ])
            )
            ->send();
    }

    protected function getChat(): \DefStudio\Telegraph\Telegraph
    {
        if ($this->message?->chat()?->id()) {
            return Telegraph::chat($this->message->chat()->id());
        }

        if ($this->callbackQuery?->message()?->chat()?->id()) {
            return Telegraph::chat($this->callbackQuery->message()?->chat()->id());
        }

        throw new \RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat ID –¥–ª—è –æ—Ç–≤–µ—Ç–∞.");
    }

    protected function getUserId(): int
    {
        if ($this->message?->from()?->id()) {
            return $this->message->from()->id();
        }

        if ($this->callbackQuery?->from()?->id()) {
            return $this->callbackQuery->from()->id();
        }

        throw new \RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user ID.");
    }

    // public function actions()
    // {
    //     Telegraph::message("–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ")
    //         ->keyboard(Keyboard::make()->buttons([
    //             Button::make("Find my account with my email")->action('find_email'),
    //             Button::make("Url of this dev")->url("https://youtube.com/@flutterguides?si=VddZYChbwFHGP0AB"),
    //         ]))->send();
    // }

    // protected function handleChatMessage(Stringable $text): void
    // {
    //     try {
    //         // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
    //         $conversation = Conversation::firstOrCreate(
    //             [
    //                 'source' => 'telegram',
    //                 'external_id' => $this->chat->chat_id
    //             ],
    //             [
    //                 'status' => 'new',
    //                 'last_message_at' => now()
    //             ]
    //         );

    //         // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    //         app(ConversationService::class)->addMessage($conversation, [
    //             'direction' => Message::DIRECTION_INCOMING,
    //             'content' => $text->toString(),
    //             'content_type' => Message::CONTENT_TYPE_TEXT,
    //             'status' => Message::STATUS_SENT,
    //             'source_data' => $this->message->toArray()
    //         ]);

    //         // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    //         $this->chat->html('‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')->send();

    //     } catch (\Exception $e) {
    //         Log::error('Error handling chat message: ' . $e->getMessage(), [
    //             'trace' => $e->getTraceAsString(),
    //             'data' => [
    //                 'chat_id' => $this->chat->chat_id,
    //                 'text' => $text->toString()
    //             ]
    //         ]);
    //         $this->chat->html('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')->send();
    //     }
    // }

    // protected function handleCommand(Stringable $command): void
    // {
    //     if ($command->toString() === 'start') {
    //         $message = "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n";
    //         $message .= "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –Ω–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ–º–æ–≥—É—Ç –≤–∞–º.\n\n";
    //         $message .= "‚úçÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —ç—Ç–æ—Ç —á–∞—Ç, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n";
    //         $message .= "üí° –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å:\n";
    //         $message .= "- –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n";
    //         $message .= "- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n";
    //         $message .= "- –î–æ–∫—É–º–µ–Ω—Ç—ã\n\n";
    //         $message .= "üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: –ü–ù-–ü–¢ —Å 9:00 –¥–æ 18:00";

    //         $this->chat->html($message)->send();
    //     }
    // }

    // protected function handleDocument(): void
    // {
    //     try {
    //         $document = $this->message->document;

    //         $conversation = Conversation::firstOrCreate(
    //             [
    //                 'source' => 'telegram',
    //                 'external_id' => $this->chat->chat_id
    //             ],
    //             [
    //                 'status' => 'new',
    //                 'last_message_at' => now()
    //             ]
    //         );

    //         app(ConversationService::class)->addMessage($conversation, [
    //             'direction' => Message::DIRECTION_INCOMING,
    //             'content' => $this->message->caption ?? '–î–æ–∫—É–º–µ–Ω—Ç',
    //             'content_type' => Message::CONTENT_TYPE_FILE,
    //             'status' => Message::STATUS_SENT,
    //             'source_data' => $this->message->toArray(),
    //             'attachments' => [
    //                 [
    //                     'type' => 'document',
    //                     'file_id' => $document->file_id,
    //                     'file_name' => $document->file_name,
    //                     'mime_type' => $document->mime_type,
    //                     'file_size' => $document->file_size
    //                 ]
    //             ]
    //         ]);

    //         $this->chat->html('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω')->send();

    //     } catch (\Exception $e) {
    //         Log::error('Error handling document:', [
    //             'error' => $e->getMessage(),
    //             'trace' => $e->getTraceAsString()
    //         ]);
    //         $this->chat->html('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞')->send();
    //     }
    // }

    // protected function handlePhoto(): void
    // {
    //     try {
    //         $photo = $this->message->photo;

    //         $conversation = Conversation::firstOrCreate(
    //             [
    //                 'source' => 'telegram',
    //                 'external_id' => $this->chat->chat_id
    //             ],
    //             [
    //                 'status' => 'new',
    //                 'last_message_at' => now()
    //             ]
    //         );

    //         app(ConversationService::class)->addMessage($conversation, [
    //             'direction' => Message::DIRECTION_INCOMING,
    //             'content' => $this->message->caption ?? '–§–æ—Ç–æ',
    //             'content_type' => Message::CONTENT_TYPE_IMAGE,
    //             'status' => Message::STATUS_SENT,
    //             'source_data' => $this->message->toArray(),
    //             'attachments' => [
    //                 [
    //                     'type' => 'photo',
    //                     'file_id' => $photo->file_id,
    //                     'file_size' => $photo->file_size
    //                 ]
    //             ]
    //         ]);

    //         $this->chat->html('‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ')->send();

    //     } catch (\Exception $e) {
    //         Log::error('Error handling photo:', [
    //             'error' => $e->getMessage(),
    //             'trace' => $e->getTraceAsString()
    //         ]);
    //         $this->chat->html('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ')->send();
    //     }
    // }
}